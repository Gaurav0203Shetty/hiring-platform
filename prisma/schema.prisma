// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  name            String?
  password        String
  role            Role
  skills          String? // Optional: candidate's skills as a comma-separated string
  jobs            Job[]            @relation("UserJobs")
  applications    Application[]    @relation("CandidateApplications")
  candidateSkills CandidateSkill[] @relation("UserCandidateSkills")
  Interview       Interview[]
  Favorite        Favorite[]
}

model CandidateSkill {
  id          String @id @default(uuid())
  candidateId String
  skill       String
  weight      Int

  candidate User @relation(fields: [candidateId], references: [id], name: "UserCandidateSkills")

  @@unique([candidateId, skill])
}

model Job {
  id             String        @id @default(uuid())
  title          String
  description    String
  requiredSkills String // Comma-separated list of required skills
  recruiterId    String
  recruiter      User          @relation(fields: [recruiterId], references: [id], name: "UserJobs")
  createdAt      DateTime      @default(now())
  applications   Application[] @relation("JobApplications")
  Interview      Interview[]
  Favorite       Favorite[]
}

model Application {
  id          String   @id @default(uuid())
  jobId       String
  candidateId String
  createdAt   DateTime @default(now())

  job       Job  @relation(fields: [jobId], references: [id], name: "JobApplications")
  candidate User @relation(fields: [candidateId], references: [id], name: "CandidateApplications")
}

model Interview {
  id          String   @id @default(uuid())
  jobId       String
  candidateId String
  scheduledAt DateTime // When the interview is scheduled (candidate request)
  status      String   @default("pending") // e.g., pending, approved, rejected
  createdAt   DateTime @default(now())

  job       Job  @relation(fields: [jobId], references: [id])
  candidate User @relation(fields: [candidateId], references: [id])
}

model Favorite {
  id          String   @id @default(uuid())
  candidateId String
  jobId       String
  createdAt   DateTime @default(now())

  candidate   User     @relation(fields: [candidateId], references: [id])
  job         Job      @relation(fields: [jobId], references: [id])

  @@unique([candidateId, jobId])
}

enum Role {
  CANDIDATE
  RECRUITER
}
